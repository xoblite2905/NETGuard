# backend/app/services/vulnerability_scanner.py
# --- PROFESSIONAL GRADE - USING YOUR CUSTOM COMMAND ---

import subprocess
import xml.etree.ElementTree as ET
import logging
from sqlalchemy.orm import Session
from app import models

logger = logging.getLogger(__name__)

def parse_nmap_xml_and_save(db: Session, xml_output: str, host_ip: str):
    # This parsing function remains the same as the previous version
    try:
        db.query(models.Vulnerability).filter(models.Vulnerability.host_ip == host_ip).delete()
        db.commit()

        root = ET.fromstring(xml_output)
        host_node = root.find('host')
        if host_node is None:
            logger.warning(f"Scan for {host_ip} completed, but no 'host' element in XML. Host may be down.")
            return

        ports_node = host_node.find('ports')
        if ports_node is None:
            logger.info(f"No scannable ports reported for {host_ip}.")
            return

        vulns_found_for_host = 0
        for port_node in ports_node.findall('port'):
            port_id = int(port_node.get('portid'))
            service_name = "unknown"
            if (service_node := port_node.find('service')) is not None:
                service_name = service_node.get('name', 'unknown')

            for script in port_node.findall('script'):
                script_id = script.get('id', 'unknown')
                script_output = script.get('output', '').strip()

                if script_output:
                    # Parse for CVEs more intelligently if possible
                    cve = next((word for word in script_output.split() if 'CVE-' in word), script_id)
                    severity = "Critical" if 'critical' in script_output.lower() else "High" if 'high' in script_output.lower() else "Info"
                    
                    vuln = models.Vulnerability(
                        host_ip=host_ip,
                        port=port_id,
                        service=service_name,
                        description=f"{script_id}: {script_output[:250]}...",
                        severity=severity, 
                        cve=cve
                    )
                    db.add(vuln)
                    vulns_found_for_host += 1

        if vulns_found_for_host > 0:
            logger.info(f"✅✅✅ SUCCESS: Found and saved {vulns_found_for_host} potential vulnerabilities for {host_ip}.")
        else:
            logger.info(f"Scan of {host_ip} complete. No vulnerabilities reported by active scripts.")
            
        db.commit()
    except ET.ParseError as e:
        logger.error(f"XML Parse Error for {host_ip}: {e}. Output was:\n{xml_output[:500]}")
    except Exception as e:
        logger.error(f"Database Error for {host_ip}: {e}", exc_info=True)
        db.rollback()


def run_vulnerability_scan_on_host(db: Session, host_ip: str):
    """Runs your specified professional-grade scan on a host."""
    logger.info(f"Starting your DEEP vulnerability scan for {host_ip}. This may take a very long time...")

    try:
        # ### YOUR COMMAND - IMPLEMENTED ###
        # Using your exact specification for the ultimate deep scan.
        command = [
            "nmap",
            "-sS", "-sU",          # TCP SYN and UDP Scan
            "-A",                 # Aggressive: Enables OS detection, version detection, script scanning, and traceroute
            "--version-intensity", "9", # Tries all probes for version detection
            "--script", "default,vuln,vulners", # Run multiple script categories
            "-T4",                # Aggressive timing
            "--max-retries", "2",
            "--min-rate", "200",
            "-p", "T:1-65535,U:1-1000", # Scan all TCP and Top 1000 UDP ports
            "-oX", "-",           # Output XML to stdout
            host_ip
        ]
        
        # Increased timeout to 45 minutes to account for the exhaustive scan
        result = subprocess.run(command, capture_output=True, text=True, check=True, timeout=2700)
        
        parse_nmap_xml_and_save(db, result.stdout, host_ip)

    except subprocess.TimeoutExpired:
        logger.error(f"Nmap scan for {host_ip} timed out after 45 minutes. The host is likely firewalled or the network is slow.")
    except subprocess.CalledProcessError as e:
        logger.error(f"Nmap scan failed for {host_ip} with return code {e.returncode}.")
        logger.error(f"Stderr: {e.stderr.strip()}")
    except Exception as e:
        logger.error(f"An unexpected error occurred during scan for {host_ip}: {e}")
